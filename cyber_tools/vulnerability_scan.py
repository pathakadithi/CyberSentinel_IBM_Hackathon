import pandas as pd
from ibm_watsonx_orchestrate.agent_builder.tools import tool, ToolPermission
import os

# current_dir = os.path.dirname(os.path.abspath(__file__))
# csv_path = os.path.join(current_dir, "data", "cve_dataset.csv")
# Determine path relative to this script
# Change this line in your tool_entry_point.py:
BASE_DIR = os.path.dirname(__file__)
CSV_PATH = os.path.join(BASE_DIR, "cve_dataset.csv")

CVE_DF = pd.read_csv(CSV_PATH)

@tool(name="cve_lookup", description="Look up a CVE by its ID", permission=ToolPermission.ADMIN)
def cve_lookup(cve_id: str):
    match = CVE_DF[CVE_DF["CVE ID"].str.upper() == cve_id.upper()]
    if match.empty:
        return {"found": False, "message": f"No CVE found for ID {cve_id}"}
    return match.to_dict(orient="records")[0]

@tool(name="cve_list_recent", description="List N most recent CVEs", permission=ToolPermission.ADMIN)
def cve_list_recent(limit: int = 10):
    df_sorted = CVE_DF.sort_values(by="CVE ID", ascending=False)
    return df_sorted.head(limit).to_dict(orient="records")

@tool(name="cve_search_by_keyword", description="Search CVEs by keyword in description", permission=ToolPermission.ADMIN)
def cve_search_by_keyword(keyword: str, limit: int = 10):
    matches = CVE_DF[CVE_DF["Description"].str.contains(keyword, case=False, na=False)]
    if matches.empty:
        return {"found": False, "message": f"No CVEs found for keyword: {keyword}"}
    return matches.head(limit).to_dict(orient="records")

@tool(name="cve_explain", description="Explain CVE concepts and CVSS scoring", permission=ToolPermission.ADMIN)
def cve_explain(topic: str):
    explanations = {
        "importance": "CVEs (Common Vulnerabilities and Exposures) are standardized identifiers for security issues...",
        "cvss": "CVSS (Common Vulnerability Scoring System) provides a numerical score (0-10) to indicate the severity...",
        "default": "CVE stands for Common Vulnerabilities and Exposures. It's a database of known security issues."
    }
    return {"topic": topic, "explanation": explanations.get(topic.lower(), explanations["default"])}
